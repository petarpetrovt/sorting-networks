<#@ template language="C#" #>
<#@ include file="$(T4IncludeDir)TemplateUtilities.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace SortingNetworks.Tests
{
	using Microsoft.VisualStudio.TestTools.UnitTesting;

	partial class SNBestKnownTests
	{
<#foreach (string typeName in GetBranchlessTypeNames()) {#>
		[TestMethod]
		[DynamicData(nameof(GetModeAndIterations), DynamicDataSourceType.Method)]
		public void Ascending_Branchless_<#= GetTypeDisplayName(typeName) #>(GenerationMode mode, int iterations)
		{
			for (int length = SNBestKnown.MinLength; length <= SNBestKnown.MaxLength; length++)
			{
				for (int i = 0; i < iterations; i++)
				{
					GenerateArraysAscending(mode, length, out <#= typeName #>[] expected, out <#= typeName #>[] actual);

					SNBestKnown.SortAscendingBranchless(ref actual[0], length);

					CollectionAssert.AreEqual(expected, actual, $"Collections differs for length `{length}`.");
				}
			}
		}

		[TestMethod]
		[DynamicData(nameof(GetModeAndIterations), DynamicDataSourceType.Method)]
		public void Descending_Branchless_<#= GetTypeDisplayName(typeName) #>(GenerationMode mode, int iterations)
		{
			for (int length = SNBestKnown.MinLength; length <= SNBestKnown.MaxLength; length++)
			{
				for (int i = 0; i < iterations; i++)
				{
					GenerateArraysDescending(mode, length, out <#= typeName #>[] expected, out <#= typeName #>[] actual);

					SNBestKnown.SortDescendingBranchless(ref actual[0], length);

					CollectionAssert.AreEqual(expected, actual, $"Collections differs for length `{length}`.");
				}
			}
		}

<#}#>
	}
}
