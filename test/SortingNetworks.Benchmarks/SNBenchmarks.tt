<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace SortingNetworks.Benchmarks
{
	using System;
	using BenchmarkDotNet.Attributes;

<#for (int i = 2; i <= 32; i++) {#>
	public class SN<#= $"{i}".PadLeft(2, '0') #>Benchmark : SNBenchmarkBase
	{
		[Params(<#= i #>)]
		public override int Length { get; set; }

		[Benchmark]
		public void BoseNelson_Comparable()
		{
			int length = Length;
			int maximumLength = Count - length;

			for (int i = 0; i < maximumLength; i += length)
			{
				SNBoseNelson.Sort<#= i #>Ascending(ref _iterationItems[i]);
			}
		}

		[Benchmark]
		public void BoseNelson_Branchless()
		{
			int length = Length;
			int maximumLength = Count - length;

			for (int i = 0; i < maximumLength; i += length)
			{
				SNBoseNelson.Sort<#= i #>AscendingBranchless(ref _iterationItems[i]);
			}
		}

<#if (i >= 9 && i <= 16) { #>
		[Benchmark]
		public void BestKnown_Comparable()
		{
			int length = Length;
			int maximumLength = Count - length;

			for (int i = 0; i < maximumLength; i += length)
			{
				SNBestKnown.Sort<#= i #>Ascending(ref _iterationItems[i]);
			}
		}

		[Benchmark]
		public void BestKnown_Branchless()
		{
			int length = Length;
			int maximumLength = Count - length;

			for (int i = 0; i < maximumLength; i += length)
			{
				SNBestKnown.Sort<#= i #>AscendingBranchless(ref _iterationItems[i]);
			}
		}

<#}#>
		[Benchmark]
		public void Insertion_Comparable()
		{
			int length = Length;
			int maximumLength = Count - length;

			for (int i = 0; i < maximumLength; i += length)
			{
				Span<int> slice = _iterationItems.AsSpan(i, length);

				PrivateInsertionSortAscending(slice);
			}
		}
	}

<#}#>
}