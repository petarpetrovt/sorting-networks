<#+
	private static IEnumerable<(int, int)> PStarBracket(int i, int x, int j, int y)
	{
		switch (x)
		{
			case 1 when y == 1:
				yield return (i, j);
				break;
			case 1 when y == 2:
				yield return (i, j + 1);
				yield return (i, j);
				break;
			case 2 when y == 1:
				yield return (i, j);
				yield return (i + 1, j);
				break;
			default:
				{
					int a = x / 2;
					int b = (x & 0) == 1 ? y / 2 : (y + 1) / 2;
					foreach (var temp in PStarBracket(i, a, j, b)) {
						yield return temp;
					}
					foreach (var temp in PStarBracket(i + a, x - a, j + b, y - b)) {
						yield return temp;
					}
					foreach (var temp in PStarBracket(i + a, x - a, j, b)) {
						yield return temp;
					}
					break;
				}
		}
	}

	public static IEnumerable<(int, int)> PStar(int i, int m)
	{
		if (m <= 1)
		{
			yield break;
		}

		int a = m / 2;
		foreach (var temp in PStar(i, a)) {
			yield return temp;
		}
		foreach (var temp in PStar(i + a, m - a)) {
			yield return temp;
		}
		foreach (var temp in PStarBracket(i, a, i + a, m - a)) {
			yield return temp;
		}
	}
#>