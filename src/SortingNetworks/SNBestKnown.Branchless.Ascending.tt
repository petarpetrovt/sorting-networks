<#@ template language="C#" #>
<#@ include file="$(T4IncludeDir)TemplateUtilities.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# int minLength = GetMinLength(); #>
<# int maxLength = GetMaxLength(); #>
<# int minLengthOverwrite = 9; #>
<# int maxLengthOverwrite = 16; #>
namespace SortingNetworks;

partial class SNBestKnown
{
<#foreach (string typeName in GetBranchlessTypeNames()) {#>
<#for (int i = minLengthOverwrite; i <= maxLengthOverwrite; i++) {#>
	/// <summary>
	/// Sorts a collection of <#= i #> elements in ascending order using branchless min/max swap.
	/// </summary>
	/// <param name="p0">the reference to the first element of the collection</param>
	public static new void Sort<#= i #>AscendingBranchless(ref <#= typeName #> p0)
	{
<#for (int y = 1; y < i; y++) {#>
		ref <#= typeName #> p<#= y #> = ref Unsafe.Add(ref p0, <#= y #>);
<#}#>

		<#= string.Join("\r\n		", GetBestKnownSwapMacros(i).Select(x=> GetSwapIfGreaterBranchless($"p{x.Item1}", $"p{x.Item2}"))) #>
	}

<#}#>
<#}#>
<#foreach (string typeName in GetBranchlessTypeNames()) {#>
	/// <summary>
	/// Sorts a collection of specified number of elements in ascending order using branchless min/max swap.
	/// </summary>
	/// <param name="p0">the reference to the first element of the collection</param>
	/// <param name="length">the length of the collection</param>
	/// <exception cref="ArgumentOutOfRangeException">collection length is not between <see cref="MinLength"/> and <see cref="MaxLength"/></exception>
	public static new void SortAscendingBranchless(ref <#= typeName #> p0, in int length)
	{
		switch (length)
		{
<#for (int i = minLength; i <= maxLength; i++) {#>
			case <#= i #>: Sort<#= i #>AscendingBranchless(ref p0); break;
<#}#>
			default:
				{
					ThrowHelper.ArrayArgumentOutOfRange(nameof(length), length, MinLength, MaxLength);
					break;
				}
		}
	}

<#}#>
}