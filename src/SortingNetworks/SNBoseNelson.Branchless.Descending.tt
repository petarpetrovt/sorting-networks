<#@ template language="C#" #>
<#@ include file="$(T4IncludeDir)TemplateUtilities.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace SortingNetworks
{
	using System;
	using System.Runtime.CompilerServices;

	partial class SNBoseNelson
	{
<#for (int i = minLength; i <= maxLength; i++) {#>
		/// <summary>
		/// Sorts a collection of <#= i #> elements in descending order using the <see cref="IComparable{T}"/> generic
		/// interface implementation of each element.
		/// </summary>
		/// <param name="p0">the reference to the first element of the collection</param>
		public static void Sort<#= i #>DescendingBranchless(ref int p0)
		{
<#for (int y = 1; y < i; y++) {#>
			ref int p<#= y #> = ref Unsafe.Add(ref p0, <#= y #>);
<#}#>

			<#= string.Join("\r\n			", GetBoseNelsonSwapMacros(i).Select(x=> GetSwapIfLesserBranchless($"p{x.Item1 - 1}", $"p{x.Item2 - 1}"))) #>
		}

<#}#>
		/// <summary>
		/// Sorts a collection of specified number of elements in descending order using the <see cref="IComparable{T}"/> generic
		/// interface implementation of each element.
		/// </summary>
		/// <param name="p0">the reference to the first element of the collection</param>
		/// <param name="length">the length of the collection</param>
		/// <exception cref="ArgumentOutOfRangeException">collection length is not between <see cref="MinLength"/> and <see cref="MaxLength"/></exception>
		public static void SortDescendingBranchless(ref int p0, in int length)
		{
			switch (length)
			{
<#for (int i = minLength; i <= maxLength; i++) {#>
				case <#= i #>: Sort<#= i #>DescendingBranchless(ref p0); break;
<#}#>
				default:
					{
						ThrowHelper.ArrayArgumentOutOfRange(nameof(length), length, MinLength, MaxLength);
						break;
					}
			}
		}
	}
}