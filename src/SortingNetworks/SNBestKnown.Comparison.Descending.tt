<#@ template language="C#" #>
<#@ include file="$(T4IncludeDir)TemplateUtilities.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# int minLengthOverwrite = 9; #>
<# int maxLengthOverwrite = 16; #>
namespace SortingNetworks
{
	using System;
	using System.Diagnostics.CodeAnalysis;
	using System.Runtime.CompilerServices;

	partial class SNBestKnown
	{
<#for (int i = minLengthOverwrite; i <= maxLengthOverwrite; i++) {#>
		/// <summary>
		/// Sorts a collection of <#= i #> elements in descending order using the specified <see cref="Comparison{T}"/>.
		/// </summary>
		/// <typeparam name="T">The type of the elements of the collection.</typeparam>
		/// <param name="p0">the reference to the first element of the collection</param>
		/// <param name="comparison">The <see cref="Comparison{T}"/> to use when comparing elements.</param>
		public static new void Sort<#= i #>Descending<T>(ref T p0, [DisallowNull] Comparison<T> comparison)
		{
			Assert.NotNull(comparison, nameof(comparison));

<#for (int y = 1; y < i; y++) {#>
			ref var p<#= y #> = ref Unsafe.Add(ref p0, <#= y #>);
<#}#>

			T temp;
			<#= string.Join("\r\n			", GetBestKnownSwapMacros(i).Select(x=> GetSwapIfLesserComparison($"p{x.Item1}", $"p{x.Item2}"))) #>
		}

<#}#>
		/// <summary>
		/// Sorts a collection of specified number of elements in descending order using the specified <see cref="Comparison{T}"/>.
		/// </summary>
		/// <typeparam name="T">The type of the elements of the collection.</typeparam>
		/// <param name="p0">the reference to the first element of the collection</param>
		/// <param name="length">the length of the collection</param>
		/// <param name="comparison">The <see cref="Comparison{T}"/> to use when comparing elements.</param>
		/// <exception cref="ArgumentOutOfRangeException">collection length is not between <see cref="MinLength"/> and <see cref="MaxLength"/></exception>
		public static new void SortDescending<T>(ref T p0, in int length, [DisallowNull] Comparison<T> comparison)
			where T : IComparable<T>
		{
			Assert.NotNull(comparison, nameof(comparison));

			switch (length)
			{
<#for (int i = minLength; i <= maxLength; i++) {#>
				case <#= i #>: Sort<#= i #>Descending(ref p0, comparison); break;
<#}#>
				default: throw new ArgumentOutOfRangeException(nameof(length), $"Sorting network length `{length}` must be between `{MinLength}` and `{MaxLength}`.");
			}
		}
	}
}