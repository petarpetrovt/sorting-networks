<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# int minLength = 2; #>
<# int maxLength = 5; #>
namespace SortingNetworks
{
	using System;
	using System.Runtime.CompilerServices;

	/// <summary>
	/// Sorting networks implementation using Bose-Nelson algorithm.
	/// </summary>
	public class SNBoseNelsonGenerated : SNBase
	{
<#for (int i = minLength; i <= maxLength; i++) {#>
		/// <summary>
		/// Sorts a collection of <#= i #> elements in ascending order using the <see cref="IComparable{T}"/> generic
		/// interface implementation of each element.
		/// </summary>
		/// <typeparam name="T">The type of the elements of the collection.</typeparam>
		/// <param name="p0">the reference to the first element of the collection</param>
		public static void Sort<#= i #>Ascending<T>(ref T p0)
			where T : IComparable<T>
		{
<#for (int y = 1; y < i; y++) {#>
			ref var p<#= y #> = ref Unsafe.Add(ref p<#= y - 1 #>, <#= y #>);
<#}#>

			<#= string.Join("\r\n			", PStar(1, i).Select(x=> $"SwapIfGreater(ref p{x.Item1 - 1}, ref p{x.Item2 - 1});")) #>
		}

<#}#>
	}
}
<#+
	private static IEnumerable<(int, int)> PStarBracket(int i, int x, int j, int y)
	{
		switch (x)
		{
			case 1 when y == 1:
				yield return (i, j);
				break;
			case 1 when y == 2:
				yield return (i, j + 1);
				yield return (i, j);
				break;
			case 2 when y == 1:
				yield return (i, j);
				yield return (i + 1, j);
				break;
			default:
				{
					int a = x / 2;
					int b = (x & 0) == 1 ? y / 2 : (y + 1) / 2;
					foreach (var temp in PStarBracket(i, a, j, b)) {
						yield return temp;
					}
					foreach (var temp in PStarBracket(i + a, x - a, j + b, y - b)) {
						yield return temp;
					}
					foreach (var temp in PStarBracket(i + a, x - a, j, b)) {
						yield return temp;
					}
					break;
				}
		}
	}

	private static IEnumerable<(int, int)> PStar(int i, int m)
	{
		if (m <= 1)
		{
			yield break;
		}

		int a = m / 2;
		foreach (var temp in PStar(i, a)) {
			yield return temp;
		}
		foreach (var temp in PStar(i + a, m - a)) {
			yield return temp;
		}
		foreach (var temp in PStarBracket(i, a, i + a, m - a)) {
			yield return temp;
		}
	}
#>